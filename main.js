/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NewFilePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var NewFilePlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerEvent(this.app.workspace.on("file-menu", (menu, file) => {
      this.addCreateFileMenuItem(menu, file);
    }));
    this.registerEvent(this.app.workspace.on("editor-menu", (menu, editor, view) => {
      const selection = editor.getSelection();
      const linkMatch = selection.match(/\[\[([^\]]+)\]\]/);
      if (linkMatch) {
        const linkText = linkMatch[1].split("|")[0];
        const file = this.app.metadataCache.getFirstLinkpathDest(linkText, "");
        if (!file && view.file) {
          this.addCreateFileMenuItem(menu, view.file, linkText);
        }
      }
    }));
  }
  addCreateFileMenuItem(menu, file, newFileName) {
    menu.addItem((item) => {
      item.setTitle("Create file with front matter").setIcon("document").onClick(() => {
        this.createNewFileWithFrontMatter(file, newFileName);
      });
    });
  }
  async createNewFileWithFrontMatter(file, newFileName) {
    try {
      const activeFile = await this.getActiveFile(file);
      if (!activeFile || !newFileName)
        return;
      const newFile = await this.createFile(activeFile, newFileName);
      await this.openNewFile(newFile);
      new import_obsidian.Notice(`Created new file: ${newFileName}`);
    } catch (error) {
      console.error("Error creating new file:", error);
      new import_obsidian.Notice("Error creating new file. Check console for details.");
    }
  }
  async getActiveFile(file) {
    const activeFile = file || this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian.Notice("No active file");
      return null;
    }
    return activeFile;
  }
  async createFile(sourceFile, fileName) {
    var _a;
    const frontMatter = await this.getFrontMatter(sourceFile);
    const folderPath = ((_a = sourceFile.parent) == null ? void 0 : _a.path) || "";
    const newFilePath = `${folderPath}/${fileName}.md`;
    return await this.app.vault.create(newFilePath, frontMatter);
  }
  async openNewFile(file) {
    const leaf = this.app.workspace.getLeaf(false);
    await leaf.openFile(file);
  }
  async getFrontMatter(file) {
    try {
      const content = await this.app.vault.read(file);
      const cache = this.app.metadataCache.getFileCache(file);
      if (!(cache == null ? void 0 : cache.frontmatter)) {
        return "---\n---\n";
      }
      const frontmatterRegex = /^---\n([\s\S]*?)\n---/;
      const match = content.match(frontmatterRegex);
      if (match) {
        return match[0] + "\n";
      }
      return "---\n---\n";
    } catch (error) {
      console.error("Error getting front matter:", error);
      return "---\n---\n";
    }
  }
};
